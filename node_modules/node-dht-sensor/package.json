{
  "author": {
    "name": "David Momenso"
  },
  "name": "node-dht-sensor",
  "description": "Reads data from DHT sensors on Raspberry Pi",
  "version": "0.0.11",
  "repository": {
    "url": "https://github.com/momenso/node-dht-sensor"
  },
  "scripts": {
    "preinstall": "./preinst"
  },
  "main": "./build/Release/node_dht_sensor",
  "dependencies": {
    "nan": "^2.2.0"
  },
  "license": "LGPL",
  "readme": "# node-dht-sensor\n\nThis node.js module supports querying air temperature and relative humidity from a compatible DHT sensor.\n\n## Installation\n``` bash\n$ npm install node-dht-sensor\n```\n\n## Usage\n\nThis module uses the [BCM2835](http://www.airspayce.com/mikem/bcm2835/) library that requires access to \n/open/mem. Because of this, you will typically run node with admin privileges.\n\nThe first step is initializing the sensor by specifying the sensor type and which GPIO pin the sensor is connected. It should work for DHT11, DHT22 and AM2302 sensors. If the initialization succeeds when you can call the read function to obtain the latest readout from the sensor. Readout values contains a temperature and a humidity property.\n\n### First Example\n\nThis sample queries the AM2302 sensor connected to the GPIO 4 every 2 seconds and displays the result on the console. \n\n``` javascript\nvar sensorLib = require('node-dht-sensor');\n\nvar sensor = {\n    initialize: function () {\n        return sensorLib.initialize(22, 4);\n    },\n    read: function () {\n        var readout = sensorLib.read();\n        console.log('Temperature: ' + readout.temperature.toFixed(2) + 'C, ' +\n            'humidity: ' + readout.humidity.toFixed(2) + '%');\n        setTimeout(function () {\n            sensor.read();\n        }, 2000);\n    }\n};\n\nif (sensor.initialize()) {\n    sensor.read();\n} else {\n    console.warn('Failed to initialize sensor');\n}\n```\n\n### Multiple Sensors Example\n\nThe following example shows a method for querying multiple sensors connected to the same Raspberry Pi. For this example, we have two sensors:\n\n1. A DHT11 sensor connected to GPIO 17\n2. High-resolution DHT22 sensor connected to GPIO 4\n\n``` javascript\nvar sensorLib = require(\"node-dht-sensor\");\n\nvar sensor = {\n    sensors: [ {\n        name: \"Indoor\",\n        type: 11,\n        pin: 17\n    }, {\n        name: \"Outdoor\",\n        type: 22,\n        pin: 4\n    } ],\n    read: function() {\n        for (var a in this.sensors) {\n            var b = sensorLib.readSpec(this.sensors[a].type, this.sensors[a].pin);\n            console.log(this.sensors[a].name + \": \" + \n              b.temperature.toFixed(1) + \"C, \" + \n              b.humidity.toFixed(1) + \"%\");\n        }\n        setTimeout(function() {\n            sensor.read();\n        }, 2000);\n    }\n};\n\nsensor.read();\n```\n\n\n### Reference for building from source\n\nStandard node-gyp commands are used to build the module.\n\n1. In case, you don't have node-gyp, install it first:\n   ``` bash\n   $ sudo npm install node-gyp -g\n   ```\n\n2. Generate the configuration files\n   ``` bash\n   $ node-gyp configure\n   ```\n\n3. Build the component\n   ``` bash\n   $ node-gyp build\n   ```\n\n### Verbose output\n\nVerbose output from the module can be enabled by defining ```VERBOSE``` during the module compilation. For example, this can be enabled via the binging,gyp file:\n\n``` javascript\n{\n  'targets': [\n    {\n      'target_name': 'node-dht-sensor',\n      'sources': [ 'node-dht-sensor.cpp' ],\n      'libraries': [ '-lbcm2835' ],\n      'defines': [ 'VERBOSE']\n    }\n  ]\n}\n```\n\n### Appendix A: Quick Node.js installation guide\n\nThere are many ways you can get Node.js installed on your Raspberry Pi but the following method is very convenient for getting started on the latest version, very quickly.\n``` shell\n$ wget http://node-arm.herokuapp.com/node_latest_armhf.deb \n$ sudo dpkg -i node_latest_armhf.deb\n```\n\n\n### References\n\n[1]: Node.js latest release - http://nodejs.org/dist/latest/\n\n[2]: BCM2835 - http://www.airspayce.com/mikem/bcm2835/\n\n[3]: Node.js native addon build tool - https://github.com/TooTallNate/node-gyp\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/momenso/node-dht-sensor/issues"
  },
  "_id": "node-dht-sensor@0.0.11",
  "dist": {
    "shasum": "e2f52b91e9f5df44c1d3f0b211fc06fcf120704a"
  },
  "_from": "node-dht-sensor@0.0.11",
  "_resolved": "https://registry.npmjs.org/node-dht-sensor/-/node-dht-sensor-0.0.11.tgz"
}
